// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/candles/v1/candles.proto

package candlesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "hermeneutic-candles/gen/proto/candles/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CandlesServiceName is the fully-qualified name of the CandlesService service.
	CandlesServiceName = "proto.candles.v1.CandlesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CandlesServiceStreamCandlesProcedure is the fully-qualified name of the CandlesService's
	// StreamCandles RPC.
	CandlesServiceStreamCandlesProcedure = "/proto.candles.v1.CandlesService/StreamCandles"
)

// CandlesServiceClient is a client for the proto.candles.v1.CandlesService service.
type CandlesServiceClient interface {
	StreamCandles(context.Context, *connect.Request[v1.StreamCandlesRequest]) (*connect.ServerStreamForClient[v1.StreamCandlesResponse], error)
}

// NewCandlesServiceClient constructs a client for the proto.candles.v1.CandlesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCandlesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CandlesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	candlesServiceMethods := v1.File_proto_candles_v1_candles_proto.Services().ByName("CandlesService").Methods()
	return &candlesServiceClient{
		streamCandles: connect.NewClient[v1.StreamCandlesRequest, v1.StreamCandlesResponse](
			httpClient,
			baseURL+CandlesServiceStreamCandlesProcedure,
			connect.WithSchema(candlesServiceMethods.ByName("StreamCandles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// candlesServiceClient implements CandlesServiceClient.
type candlesServiceClient struct {
	streamCandles *connect.Client[v1.StreamCandlesRequest, v1.StreamCandlesResponse]
}

// StreamCandles calls proto.candles.v1.CandlesService.StreamCandles.
func (c *candlesServiceClient) StreamCandles(ctx context.Context, req *connect.Request[v1.StreamCandlesRequest]) (*connect.ServerStreamForClient[v1.StreamCandlesResponse], error) {
	return c.streamCandles.CallServerStream(ctx, req)
}

// CandlesServiceHandler is an implementation of the proto.candles.v1.CandlesService service.
type CandlesServiceHandler interface {
	StreamCandles(context.Context, *connect.Request[v1.StreamCandlesRequest], *connect.ServerStream[v1.StreamCandlesResponse]) error
}

// NewCandlesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCandlesServiceHandler(svc CandlesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	candlesServiceMethods := v1.File_proto_candles_v1_candles_proto.Services().ByName("CandlesService").Methods()
	candlesServiceStreamCandlesHandler := connect.NewServerStreamHandler(
		CandlesServiceStreamCandlesProcedure,
		svc.StreamCandles,
		connect.WithSchema(candlesServiceMethods.ByName("StreamCandles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.candles.v1.CandlesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CandlesServiceStreamCandlesProcedure:
			candlesServiceStreamCandlesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCandlesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCandlesServiceHandler struct{}

func (UnimplementedCandlesServiceHandler) StreamCandles(context.Context, *connect.Request[v1.StreamCandlesRequest], *connect.ServerStream[v1.StreamCandlesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.candles.v1.CandlesService.StreamCandles is not implemented"))
}
